name: Build and Publish

on:
  workflow_dispatch:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  RESOURCE_GROUP: ${{vars.RESOURCE_GROUP}}
  CLUSTER_NAME: ${{vars.CLUSTER_NAME}}
  DEPLOYMENT_MANIFEST_PATH: ${{vars.DEPLOYMENT_MANIFEST_PATH}}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      continue: "false"
    strategy:
      matrix:
        service:
          - name: "ajeeshneudesic/auction-svc"
            path: "src/AuctionService"
          - name: "ajeeshneudesic/search-svc"
            path: "src/SearchService"
          - name: "ajeeshneudesic/identity-svc"
            path: "src/IdentityService"
          - name: "ajeeshneudesic/gateway-svc"
            path: "src/GatewayService"
          - name: "ajeeshneudesic/bid-svc"
            path: "src/BiddingService"
          - name: "ajeeshneudesic/notify-svc"
            path: "src/NotificationService"
          - name: "ajeeshneudesic/web-app"
            path: "frontend/web-app"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for changes in service path
        run: |
          if git diff --quiet HEAD^ HEAD -- ${{matrix.service.path}}; then
            echo "No changes in ${{matrix.service.path}}. Skipping build"
            echo "continue=false" >> $GITHUB_ENV
          else
            echo "Changes detected in ${{matrix.service.path}}. Proceeding with build"
            echo "continue=true" >> $GITHUB_ENV
          fi

      - name: Setup docker buildx
        if: env.continue == 'true'
        uses: docker/setup-buildx-action@v2

      - name: Login to docker.
        if: env.continue == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_TOKEN}}

      - name: Build and push
        if: env.continue == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{matrix.service.path}}/Dockerfile
          push: true
          tags: ${{matrix.service.name}}:latest

  apply-k8s:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: [build-and-push]
    steps:
      # Checks out the repository this file is in
      - uses: actions/checkout@v4

      # Logs in with your Azure credentials
      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Use kubelogin to configure your kubeconfig for Azure auth
      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: "v0.0.25"

      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show
            # You can write your Azure CLI inline scripts here.

      # Use kubelogin to configure your kubeconfig for Azure auth
      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: "v0.0.25"

      # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
      - name: Get K8s context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          admin: "false"
          use-kubelogin: "true"

      # - name: Deploys application
      #   uses: Azure/k8s-deploy@v4
      #   with:
      #     action: deploy
      #     manifests: |
      #       infra/k8s
      #       infra/prod-k8s
